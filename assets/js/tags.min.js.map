{
  "version": 3,
  "sources": ["tags.js"],
  "sourcesContent": ["/**\r\n * Bootstrap 5 (and 4!) tags\r\n *\r\n * Turns your select[multiple] into nice tags lists\r\n *\r\n * Required Bootstrap 5 styles:\r\n * - badge\r\n * - background-color utility\r\n * - margin-end utility\r\n * - float-start utility\r\n * - forms\r\n * - dropdown\r\n */\r\n\r\n// #region config\r\n\r\n/**\r\n * @callback EventCallback\r\n * @param {Event} event\r\n * @param {Tags} inst\r\n * @returns {void}\r\n */\r\n\r\n/**\r\n * @callback ServerCallback\r\n * @param {Response} response\r\n * @returns {Promise}\r\n */\r\n\r\n/**\r\n * @callback RenderCallback\r\n * @param {Suggestion} item\r\n * @param {String} label\r\n * @param {Tags} inst\r\n * @returns {String}\r\n */\r\n\r\n/**\r\n * @callback ItemCallback\r\n * @param {Suggestion} item\r\n * @param {Tags} inst\r\n * @returns {void}\r\n */\r\n\r\n/**\r\n * @callback ValueCallback\r\n * @param {String} value\r\n * @param {Tags} inst\r\n * @returns {void}\r\n */\r\n\r\n/**\r\n * @callback AddCallback\r\n * @param {String} value\r\n * @param {Object} data\r\n * @param {Tags} inst\r\n * @returns {void|Boolean}\r\n */\r\n\r\n/**\r\n * @callback CreateCallback\r\n * @param {HTMLOptionElement} option\r\n * @param {Tags} inst\r\n * @returns {void}\r\n */\r\n\r\n/**\r\n * @typedef Config\r\n * @property {Boolean} allowNew Allows creation of new tags\r\n * @property {Boolean} showAllSuggestions Show all suggestions even if they don't match. Disables validation.\r\n * @property {String} badgeStyle Color of the badge (color can be configured per option as well)\r\n * @property {Boolean} allowClear Show a clear icon\r\n * @property {Boolean} clearEnd Place clear icon at the end\r\n * @property {Array|String} selected A comma separated list of selected values\r\n * @property {String} regex Regex for new tags\r\n * @property {Array|String} separator A list (pipe separated) of characters that should act as separator (default is using enter key)\r\n * @property {Number} max Limit to a maximum of tags (0 = no limit)\r\n * @property {String} placeholder Provides a placeholder if none are provided as the first empty option\r\n * @property {String} clearLabel Text as clear tooltip\r\n * @property {String} searchLabel Default placeholder\r\n * @property {Boolean} keepOpen Keep suggestions open after selection, clear on focus out\r\n * @property {Boolean} allowSame Allow same tags used multiple times\r\n * @property {String} baseClass Customize the class applied to badges\r\n * @property {Boolean} addOnBlur Add new tags on blur (only if allowNew is enabled)\r\n * @property {Boolean} showDisabled Show disabled tags\r\n * @property {Boolean} hideNativeValidation Hide native validation tooltips\r\n * @property {Number} suggestionsThreshold Number of chars required to show suggestions\r\n * @property {Number} maximumItems Maximum number of items to display\r\n * @property {Boolean} autoselectFirst Always select the first item\r\n * @property {Boolean} updateOnSelect Update input value on selection (doesn't play nice with autoselectFirst)\r\n * @property {Boolean} highlightTyped Highlight matched part of the suggestion\r\n * @property {Boolean} fullWidth Match the width on the input field\r\n * @property {Boolean} fixed Use fixed positioning (solve overflow issues)\r\n * @property {Array} activeClasses By default: [\"bg-primary\", \"text-white\"]\r\n * @property {String} labelField Key for the label\r\n * @property {String} valueField Key for the value\r\n * @property {String} queryParam Name of the param passed to endpoint (query by default)\r\n * @property {String} server Endpoint for data provider\r\n * @property {String} serverMethod HTTP request method for data provider, default is GET\r\n * @property {String|Object} serverParams Parameters to pass along to the server\r\n * @property {Object} fetchOptions Any other fetch options (https://developer.mozilla.org/en-US/docs/Web/API/fetch#syntax)\r\n * @property {Boolean} liveServer Should the endpoint be called each time on input\r\n * @property {Boolean} noCache Prevent caching by appending a timestamp\r\n * @property {Number} debounceTime Debounce time for live server\r\n * @property {String} notFoundMessage Display a no suggestions found message. Leave empty to disable\r\n * @property {RenderCallback} onRenderItem Callback function that returns the suggestion\r\n * @property {ItemCallback} onSelectItem Callback function to call on selection\r\n * @property {ValueCallback} onClearItem Callback function to call on clear\r\n * @property {CreateCallback} onCreateItem Callback function when an item is created\r\n * @property {EventCallback} onBlur Callback function on blur\r\n * @property {EventCallback} onFocus Callback function on focus\r\n * @property {AddCallback} onCanAdd Callback function to validate item. Return false to show validation message.\r\n * @property {ServerCallback} onServerResponse Callback function to process server response. Must return a Promise\r\n */\r\n\r\n/**\r\n * @typedef Suggestion\r\n * @property {String} value Can be overriden by config valueField\r\n * @property {String} label Can be overriden by config labelField\r\n * @property {Boolean} disabled\r\n * @property {Object} data\r\n * @property {Boolean} [selected]\r\n * @property {Number} [group_id]\r\n */\r\n\r\n/**\r\n * @typedef SuggestionGroup\r\n * @property {String} group\r\n * @property {Array} items\r\n */\r\n\r\n/**\r\n * @type {Config}\r\n */\r\nconst DEFAULTS = {\r\n  allowNew: false,\r\n  showAllSuggestions: false,\r\n  badgeStyle: \"primary\",\r\n  allowClear: false,\r\n  clearEnd: false,\r\n  selected: [],\r\n  regex: \"\",\r\n  separator: [],\r\n  max: 0,\r\n  clearLabel: \"Clear\",\r\n  searchLabel: \"Type a value\",\r\n  keepOpen: false,\r\n  allowSame: false,\r\n  baseClass: \"\",\r\n  placeholder: \"\",\r\n  addOnBlur: false,\r\n  showDisabled: false,\r\n  hideNativeValidation: false,\r\n  suggestionsThreshold: 1,\r\n  maximumItems: 0,\r\n  autoselectFirst: true,\r\n  updateOnSelect: false,\r\n  highlightTyped: false,\r\n  fullWidth: false,\r\n  fixed: false,\r\n  activeClasses: [\"bg-primary\", \"text-white\"],\r\n  labelField: \"label\",\r\n  valueField: \"value\",\r\n  queryParam: \"query\",\r\n  server: \"\",\r\n  serverMethod: \"GET\",\r\n  serverParams: {},\r\n  fetchOptions: {},\r\n  liveServer: false,\r\n  noCache: true,\r\n  debounceTime: 300,\r\n  notFoundMessage: \"\",\r\n  onRenderItem: (item, label, inst) => {\r\n    return label;\r\n  },\r\n  onSelectItem: (item, inst) => {},\r\n  onClearItem: (value, inst) => {},\r\n  onCreateItem: (option, inst) => {},\r\n  onBlur: (event, inst) => {},\r\n  onFocus: (event, inst) => {},\r\n  onCanAdd: (text, data, inst) => {},\r\n  onServerResponse: (response) => {\r\n    return response.json();\r\n  },\r\n};\r\n\r\n// #endregion\r\n\r\n// #region constants\r\n\r\nconst CLASS_PREFIX = \"tags-\";\r\nconst LOADING_CLASS = \"is-loading\";\r\nconst ACTIVE_CLASS = \"is-active\";\r\nconst INVALID_CLASS = \"is-invalid\";\r\nconst SHOW_CLASS = \"show\";\r\nconst VALUE_ATTRIBUTE = \"data-value\";\r\nconst NEXT = \"next\";\r\nconst PREV = \"prev\";\r\nconst FOCUS_CLASS = \"form-control-focus\"; // should match form-control:focus\r\nconst PLACEHOLDER_CLASS = \"form-placeholder-shown\"; // should match :placeholder-shown\r\nconst DISABLED_CLASS = \"form-control-disabled\"; // should match form-control:disabled\r\nconst INSTANCE_MAP = new WeakMap();\r\nlet counter = 0;\r\n\r\n// #endregion\r\n\r\n// #region functions\r\n\r\n/**\r\n * @param {Function} func\r\n * @param {number} timeout\r\n * @returns {Function}\r\n */\r\nfunction debounce(func, timeout = 300) {\r\n  let timer;\r\n  return (...args) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      //@ts-ignore\r\n      func.apply(this, args);\r\n    }, timeout);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {string} text\r\n * @param {string} size\r\n * @returns {Number}\r\n */\r\nfunction calcTextWidth(text, size = null) {\r\n  const span = document.createElement(\"span\");\r\n  document.body.appendChild(span);\r\n  span.style.fontSize = size || \"inherit\";\r\n  span.style.height = \"auto\";\r\n  span.style.width = \"auto\";\r\n  span.style.position = \"absolute\";\r\n  span.style.whiteSpace = \"no-wrap\";\r\n  span.innerHTML = text;\r\n  const width = Math.ceil(span.clientWidth);\r\n  document.body.removeChild(span);\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nfunction removeDiacritics(str) {\r\n  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} item\r\n */\r\nfunction hideItem(item) {\r\n  item.style.display = \"none\";\r\n  item.ariaHidden = \"true\";\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} item\r\n */\r\nfunction showItem(item) {\r\n  item.style.display = \"list-item\";\r\n  item.ariaHidden = \"false\";\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {HTMLElement} newEl\r\n * @returns {HTMLElement}\r\n */\r\n// function insertAfter(el, newEl) {\r\n//   return el.parentNode.insertBefore(newEl, el.nextSibling);\r\n// }\r\n\r\n// #endregion\r\n\r\nclass Tags {\r\n  /**\r\n   * @param {HTMLSelectElement} el\r\n   * @param {Object|Config} config\r\n   */\r\n  constructor(el, config = {}) {\r\n    if (!(el instanceof HTMLElement)) {\r\n      console.error(\"Invalid element\", el);\r\n      return;\r\n    }\r\n    INSTANCE_MAP.set(el, this);\r\n    counter++;\r\n    this._selectElement = el;\r\n    this._willBlur = null;\r\n\r\n    this._configure(config);\r\n\r\n    // private vars\r\n    this._keyboardNavigation = false;\r\n    this._searchFunc = debounce(() => {\r\n      this._loadFromServer(true);\r\n    }, this._config.debounceTime);\r\n    this._fireEvents = true;\r\n\r\n    this._configureParent();\r\n\r\n    // Create elements\r\n    this._holderElement = document.createElement(\"div\"); // this is the one holding the fake input and the dropmenu\r\n    this._containerElement = document.createElement(\"div\"); // this is the one for the fake input (labels + input)\r\n    this._holderElement.appendChild(this._containerElement);\r\n\r\n    // insert before select, this helps having native validation tooltips positioned properly\r\n    this._selectElement.parentElement.insertBefore(this._holderElement, this._selectElement);\r\n    // insertAfter(this._selectElement, this._holderElement);\r\n\r\n    // Configure them\r\n    this._configureHolderElement();\r\n    this._configureContainerElement();\r\n    this._configureSelectElement();\r\n    this._configureSearchInput();\r\n    this._configureDropElement();\r\n    this.resetState();\r\n\r\n    if (this._config.fixed) {\r\n      document.addEventListener(\"scroll\", this, true); // capture input for all scrollables elements\r\n      window.addEventListener(\"resize\", this);\r\n    }\r\n\r\n    // Add listeners (remove then on dispose()). See handleEvent.\r\n    this._searchInput.addEventListener(\"focus\", this); // focusin bubbles, focus does not.\r\n    this._searchInput.addEventListener(\"blur\", this); // focusout bubbles, blur does not.\r\n    this._searchInput.addEventListener(\"input\", this);\r\n    this._searchInput.addEventListener(\"keydown\", this);\r\n    this._dropElement.addEventListener(\"mousemove\", this);\r\n\r\n    this.loadData();\r\n  }\r\n\r\n  // #region Core\r\n\r\n  /**\r\n   * Attach to all elements matched by the selector\r\n   * @param {string} selector\r\n   * @param {Object} opts\r\n   */\r\n  static init(selector = \"select[multiple]\", opts = {}) {\r\n    /**\r\n     * @type {NodeListOf<HTMLSelectElement>}\r\n     */\r\n    let list = document.querySelectorAll(selector);\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (Tags.getInstance(list[i])) {\r\n        continue;\r\n      }\r\n      new Tags(list[i], opts);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLSelectElement} el\r\n   */\r\n  static getInstance(el) {\r\n    if (INSTANCE_MAP.has(el)) {\r\n      return INSTANCE_MAP.get(el);\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    this._searchInput.removeEventListener(\"focus\", this);\r\n    this._searchInput.removeEventListener(\"blur\", this);\r\n    this._searchInput.removeEventListener(\"input\", this);\r\n    this._searchInput.removeEventListener(\"keydown\", this);\r\n    this._dropElement.removeEventListener(\"mousemove\", this);\r\n\r\n    if (this._config.fixed) {\r\n      document.removeEventListener(\"scroll\", this, true);\r\n      window.removeEventListener(\"resize\", this);\r\n    }\r\n\r\n    // restore select, remove our custom stuff and unbind parent\r\n    this._selectElement.style.display = \"block\";\r\n    this._holderElement.parentElement.removeChild(this._holderElement);\r\n    if (this.parentForm) {\r\n      this.parentForm.removeEventListener(\"reset\", this);\r\n    }\r\n\r\n    INSTANCE_MAP.delete(this._selectElement);\r\n  }\r\n\r\n  /**\r\n   * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\r\n   * @param {Event} event\r\n   */\r\n  handleEvent(event) {\r\n    this[`on${event.type}`](event);\r\n  }\r\n\r\n  /**\r\n   * @param {Config|Object} config\r\n   */\r\n  _configure(config = {}) {\r\n    this._config = Object.assign({}, DEFAULTS);\r\n\r\n    // Handle options, using arguments first and data attr as override\r\n    const o = { ...config, ...this._selectElement.dataset };\r\n\r\n    // Allow 1/0, true/false as strings\r\n    const parseBool = (value) => [\"true\", \"false\", \"1\", \"0\", true, false].includes(value) && !!JSON.parse(value);\r\n\r\n    // Typecast provided options based on defaults types\r\n    for (const [key, defaultValue] of Object.entries(DEFAULTS)) {\r\n      // Check for undefined keys\r\n      if (o[key] === void 0) {\r\n        continue;\r\n      }\r\n      const value = o[key];\r\n      switch (typeof defaultValue) {\r\n        case \"number\":\r\n          this._config[key] = parseInt(value);\r\n          break;\r\n        case \"boolean\":\r\n          this._config[key] = parseBool(value);\r\n          break;\r\n        case \"string\":\r\n          this._config[key] = value.toString();\r\n          break;\r\n        case \"object\":\r\n          // Arrays have a type object in js\r\n          if (Array.isArray(defaultValue)) {\r\n            // string separator can be | or ,\r\n            const separator = value.includes(\"|\") ? \"|\" : \",\";\r\n            this._config[key] = typeof value === \"string\" ? value.split(separator) : value;\r\n          } else {\r\n            this._config[key] = typeof value === \"string\" ? JSON.parse(value) : value;\r\n          }\r\n          break;\r\n        case \"function\":\r\n          this._config[key] = typeof value === \"string\" ? window[value] : value;\r\n          break;\r\n        default:\r\n          this._config[key] = value;\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Dynamic default values\r\n    if (!this._config.placeholder) {\r\n      this._config.placeholder = this._getPlaceholder();\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Html\r\n\r\n  /**\r\n   * Find overflow parent for positioning\r\n   * and bind reset event of the parent form\r\n   */\r\n  _configureParent() {\r\n    this.overflowParent = null;\r\n    this.parentForm = this._selectElement.parentElement;\r\n    while (this.parentForm) {\r\n      if (this.parentForm.style.overflow === \"hidden\") {\r\n        this.overflowParent = this.parentForm;\r\n      }\r\n      this.parentForm = this.parentForm.parentElement;\r\n      if (this.parentForm && this.parentForm.nodeName == \"FORM\") {\r\n        break;\r\n      }\r\n    }\r\n    if (this.parentForm) {\r\n      this.parentForm.addEventListener(\"reset\", this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {string}\r\n   */\r\n  _getPlaceholder() {\r\n    // Use placeholder and data-placeholder in priority\r\n    if (this._selectElement.hasAttribute(\"placeholder\")) {\r\n      return this._selectElement.getAttribute(\"placeholder\");\r\n    }\r\n    if (this._selectElement.dataset.placeholder) {\r\n      return this._selectElement.dataset.placeholder;\r\n    }\r\n    // Fallback to first option if no value\r\n    let firstOption = this._selectElement.querySelector(\"option\");\r\n    if (!firstOption) {\r\n      return \"\";\r\n    }\r\n    if (firstOption.hasAttribute(\"selected\")) {\r\n      firstOption.removeAttribute(\"selected\");\r\n    }\r\n    return !firstOption.value ? firstOption.textContent : \"\";\r\n  }\r\n\r\n  _configureSelectElement() {\r\n    // Hiding the select should keep it focusable, otherwise we get this\r\n    // An invalid form control with name='...' is not focusable.\r\n    // If it's not focusable, we need to remove the native validation attributes\r\n\r\n    // If we use display none, we don't get the focus event\r\n    // this._selectElement.style.display = \"none\";\r\n\r\n    // If we position it like this, the html5 validation message will not display properly\r\n    if (this._config.hideNativeValidation) {\r\n      // This position dont break render within input-group and is focusable\r\n      this._selectElement.style.position = \"absolute\";\r\n      this._selectElement.style.left = \"-9999px\";\r\n    } else {\r\n      // Hide but keep it focusable. If 0 height, no native validation message will show\r\n      // It is placed below so that native tooltip is displayed properly\r\n      // Flex basis is required for input-group otherwise it breaks the layout\r\n      this._selectElement.style.cssText = `height:1px;width:1px;opacity:0;padding:0;margin:0;border:0;float:left;flex-basis:100%;`;\r\n    }\r\n\r\n    // Make sure it's not usable using tab\r\n    this._selectElement.tabIndex = -1;\r\n\r\n    // No need for custom label click event if select is focusable\r\n    // const label = document.querySelector('label[for=\"' + this._selectElement.getAttribute(\"id\") + '\"]');\r\n    // if (label) {\r\n    //   label.addEventListener(\"click\", this);\r\n    // }\r\n\r\n    // It can be focused by clicking on the label\r\n    this._selectElement.addEventListener(\"focus\", (event) => {\r\n      this.onclick(event);\r\n    });\r\n\r\n    // When using regular html5 validation, make sure our fake element get the proper class\r\n    this._selectElement.addEventListener(\"invalid\", (event) => {\r\n      this._holderElement.classList.add(INVALID_CLASS);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configure drop element\r\n   * Needs to be called after searchInput is created\r\n   */\r\n  _configureDropElement() {\r\n    this._dropElement = document.createElement(\"ul\");\r\n    this._dropElement.classList.add(...[\"dropdown-menu\", CLASS_PREFIX + \"menu\", \"p-0\"]);\r\n    this._dropElement.setAttribute(\"id\", CLASS_PREFIX + \"menu-\" + counter);\r\n    this._dropElement.setAttribute(\"role\", \"menu\");\r\n    this._dropElement.style.maxHeight = \"280px\";\r\n    if (!this._config.fullWidth) {\r\n      this._dropElement.style.maxWidth = \"360px\";\r\n    }\r\n    if (this._config.fixed) {\r\n      this._dropElement.style.position = \"fixed\";\r\n    }\r\n    this._dropElement.style.overflowY = \"auto\";\r\n    // Prevent scrolling the menu from scrolling the page\r\n    // @link https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\r\n    this._dropElement.style.overscrollBehavior = \"contain\";\r\n    this._dropElement.style.textAlign = \"unset\"; // otherwise RTL is not good\r\n\r\n    // If the mouse was outside, entering remove keyboard nav mode\r\n    this._dropElement.addEventListener(\"mouseenter\", (event) => {\r\n      this._keyboardNavigation = false;\r\n    });\r\n    this._holderElement.appendChild(this._dropElement);\r\n\r\n    // include aria-controls with the value of the id of the suggested list of values.\r\n    this._searchInput.setAttribute(\"aria-controls\", this._dropElement.getAttribute(\"id\"));\r\n  }\r\n\r\n  _configureHolderElement() {\r\n    this._holderElement.classList.add(...[\"form-control\", \"dropdown\"]);\r\n    // Reflect size\r\n    if (this._selectElement.classList.contains(\"form-select-lg\")) {\r\n      this._holderElement.classList.add(\"form-control-lg\");\r\n    }\r\n    if (this._selectElement.classList.contains(\"form-select-sm\")) {\r\n      this._holderElement.classList.add(\"form-control-sm\");\r\n    }\r\n    // If we have an overflow parent, we can simply inherit styles\r\n    if (this.overflowParent) {\r\n      this._holderElement.style.position = \"inherit\";\r\n    }\r\n    if (this._getBootstrapVersion() === 4) {\r\n      // Prevent fixed height due to form-control\r\n      this._holderElement.style.height = \"auto\";\r\n    }\r\n\r\n    // Without this, clicking on a floating label won't always focus properly\r\n    this._holderElement.addEventListener(\"click\", this);\r\n  }\r\n\r\n  _configureContainerElement() {\r\n    this._containerElement.addEventListener(\"click\", (event) => {\r\n      if (this.isDisabled()) {\r\n        return;\r\n      }\r\n      if (this._searchInput.style.visibility != \"hidden\") {\r\n        this._searchInput.focus();\r\n      }\r\n    });\r\n\r\n    // Add some extra css to help positioning\r\n    this._containerElement.style.display = \"flex\";\r\n    this._containerElement.style.alignItems = \"center\";\r\n    this._containerElement.style.flexWrap = \"wrap\";\r\n\r\n    // add initial values\r\n    // we use selectedOptions because single select can have a selected option\r\n    // without a selected attribute if it's the first value\r\n    const initialValues = this._selectElement.selectedOptions || [];\r\n    for (let j = 0; j < initialValues.length; j++) {\r\n      /**\r\n       * @type {HTMLOptionElement}\r\n       */\r\n      let initialValue = initialValues[j];\r\n      if (!initialValue.value) {\r\n        continue;\r\n      }\r\n\r\n      // Enforce selected attr for consistency\r\n      initialValue.setAttribute(\"selected\", \"selected\");\r\n\r\n      // track initial values for reset\r\n      initialValue.dataset.init = \"true\";\r\n      if (initialValue.hasAttribute(\"disabled\")) {\r\n        initialValue.dataset.disabled = \"true\";\r\n      }\r\n\r\n      // tooltips\r\n      if (initialValue.hasAttribute(\"title\")) {\r\n        initialValue.dataset.title = initialValue.getAttribute(\"title\");\r\n      }\r\n\r\n      this._createBadge(initialValue.textContent, initialValue.value, initialValue.dataset);\r\n    }\r\n  }\r\n\r\n  _configureSearchInput() {\r\n    this._searchInput = document.createElement(\"input\");\r\n    this._searchInput.type = \"text\";\r\n    this._searchInput.autocomplete = \"off\";\r\n    this._searchInput.spellcheck = false;\r\n    // @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete\r\n    this._searchInput.ariaAutoComplete = \"list\";\r\n    // @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded\r\n    // use the aria-expanded state on the element with role combobox to communicate that the list is displayed.\r\n    this._searchInput.ariaExpanded = \"false\";\r\n    this._searchInput.ariaHasPopup = \"menu\";\r\n    this._searchInput.setAttribute(\"role\", \"combobox\");\r\n    this._searchInput.ariaLabel = this._config.searchLabel;\r\n    this._searchInput.style.cssText = `background-color:transparent;color:currentColor;border:0;padding:0;outline:0;max-width:100%`;\r\n    this.resetSearchInput(true);\r\n\r\n    this._containerElement.appendChild(this._searchInput);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Events\r\n\r\n  onfocus(event) {\r\n    if (this._willBlur) {\r\n      clearTimeout(this._willBlur);\r\n    }\r\n    this._holderElement.classList.add(FOCUS_CLASS);\r\n    this.showOrSearch();\r\n    this._config.onFocus(event, this);\r\n  }\r\n\r\n  onblur(event) {\r\n    // Prevent focus being triggered when clicking again\r\n    this._willBlur = setTimeout(() => {\r\n      // Cancel any pending request\r\n      if (this._abortController) {\r\n        this._abortController.abort();\r\n      }\r\n      let clearValidation = true;\r\n      if (this._config.addOnBlur && this._searchInput.value) {\r\n        clearValidation = this._enterValue();\r\n      }\r\n      this._holderElement.classList.remove(FOCUS_CLASS);\r\n      this.hideSuggestions(clearValidation);\r\n      if (this._fireEvents) {\r\n        const sel = this.getSelection();\r\n        const data = {\r\n          selection: sel ? sel.dataset.value : null,\r\n          input: this._searchInput.value,\r\n        };\r\n        this._config.onBlur(event, this);\r\n        this._selectElement.dispatchEvent(new CustomEvent(\"tags.blur\", { bubbles: true, detail: data }));\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  oninput(ev) {\r\n    const data = this._searchInput.value;\r\n\r\n    // Add item if a separator is used\r\n    // On mobile or copy paste, it can pass multiple chars (eg: when pressing space and it formats the string)\r\n    if (data) {\r\n      const lastChar = data.slice(-1);\r\n      if (this._config.separator.length && this._config.separator.includes(lastChar)) {\r\n        // Remove separator even if adding is prevented\r\n        this._searchInput.value = this._searchInput.value.slice(0, -1);\r\n        let value = this._searchInput.value;\r\n        let label = value;\r\n        let addData = {};\r\n        // There is no good reason to use the separator feature without allowNew, but who knows!\r\n        if (!this._config.allowNew) {\r\n          const sel = this.getSelection();\r\n          if (!sel) {\r\n            return;\r\n          }\r\n          value = sel.getAttribute(VALUE_ATTRIBUTE);\r\n          label = sel.dataset.label;\r\n        } else {\r\n          addData.new = 1;\r\n        }\r\n        this._add(label, value, addData);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Adjust input width to current content\r\n    setTimeout(() => {\r\n      this._adjustWidth();\r\n    });\r\n\r\n    // Check if we should display suggestions\r\n    this.showOrSearch();\r\n  }\r\n\r\n  /**\r\n   * keypress doesn't send arrow keys, so we use keydown\r\n   * @param {KeyboardEvent} event\r\n   */\r\n  onkeydown(event) {\r\n    // Keycode reference : https://css-tricks.com/snippets/javascript/javascript-keycodes/\r\n    let key = event.keyCode || event.key;\r\n    /**\r\n     * @type {HTMLInputElement}\r\n     */\r\n    // @ts-ignore\r\n    const target = event.target;\r\n\r\n    // Android virtual keyboard might always return 229\r\n    if (event.keyCode == 229) {\r\n      key = target.value.charAt(target.selectionStart - 1).charCodeAt(0);\r\n    }\r\n\r\n    // Keyboard keys\r\n    switch (key) {\r\n      case 13:\r\n      case \"Enter\":\r\n        event.preventDefault();\r\n        this._enterValue();\r\n        break;\r\n      case 38:\r\n      case \"ArrowUp\":\r\n        event.preventDefault();\r\n        this._keyboardNavigation = true;\r\n        this._moveSelection(PREV);\r\n        break;\r\n      case 40:\r\n      case \"ArrowDown\":\r\n        event.preventDefault();\r\n        this._keyboardNavigation = true;\r\n        if (this.isDropdownVisible()) {\r\n          this._moveSelection(NEXT);\r\n        } else {\r\n          // show menu regardless of input length\r\n          this.showOrSearch(false);\r\n        }\r\n        break;\r\n      case 8:\r\n      case \"Backspace\":\r\n        // If the current item is empty, remove the last one\r\n        if (this._searchInput.value.length == 0) {\r\n          this.removeLastItem();\r\n          this._adjustWidth();\r\n          this.showOrSearch();\r\n        }\r\n        break;\r\n      case 27:\r\n      case \"Escape\":\r\n        this._searchInput.focus();\r\n        this.hideSuggestions();\r\n        break;\r\n    }\r\n  }\r\n\r\n  onmousemove(e) {\r\n    // Moving the mouse means no longer using keyboard\r\n    this._keyboardNavigation = false;\r\n  }\r\n\r\n  onscroll(e) {\r\n    this._positionMenu();\r\n  }\r\n\r\n  onresize(e) {\r\n    this._positionMenu();\r\n  }\r\n\r\n  onclick(e = null) {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    if (this.isSingle() || this.isMaxReached()) {\r\n      return;\r\n    }\r\n    // Focus on input when clicking on element or focusing select\r\n    this._searchInput.focus();\r\n  }\r\n\r\n  onreset(e) {\r\n    this.reset();\r\n  }\r\n\r\n  // #endregion\r\n\r\n  loadData() {\r\n    if (this._config.server) {\r\n      if (this._config.liveServer) {\r\n        // No need to load anything since it will happen when typing\r\n      } else {\r\n        this._loadFromServer();\r\n      }\r\n    } else {\r\n      this.resetSuggestions();\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.isDisabled()) {\r\n      this._holderElement.setAttribute(\"readonly\", \"\");\r\n      this._searchInput.setAttribute(\"disabled\", \"\");\r\n      this._holderElement.classList.add(DISABLED_CLASS);\r\n    } else {\r\n      if (this._holderElement.hasAttribute(\"readonly\")) {\r\n        this._holderElement.removeAttribute(\"readonly\");\r\n      }\r\n      if (this._searchInput.hasAttribute(\"disabled\")) {\r\n        this._searchInput.removeAttribute(\"disabled\");\r\n      }\r\n      this._holderElement.classList.remove(DISABLED_CLASS);\r\n    }\r\n  }\r\n\r\n  resetSuggestions() {\r\n    let suggestions = Array.from(this._selectElement.children)\r\n      .filter(\r\n        /**\r\n         * @param {HTMLOptionElement|HTMLOptGroupElement} option\r\n         */\r\n        (option) => {\r\n          return option instanceof HTMLOptGroupElement || !option.disabled || this._config.showDisabled;\r\n        }\r\n      )\r\n      .map(\r\n        /**\r\n         * @param {HTMLOptionElement|HTMLOptGroupElement} option\r\n         */\r\n        (option) => {\r\n          if (option instanceof HTMLOptGroupElement) {\r\n            return {\r\n              group: option.getAttribute(\"label\"),\r\n              items: option.children,\r\n            };\r\n          }\r\n          return {\r\n            value: option.getAttribute(\"value\"),\r\n            label: option.textContent,\r\n            disabled: option.disabled,\r\n            data: Object.assign(option.dataset),\r\n          };\r\n        }\r\n      );\r\n    this._buildSuggestions(suggestions);\r\n  }\r\n\r\n  /**\r\n   * Try to add the current value\r\n   * @returns {Boolean}\r\n   */\r\n  _enterValue() {\r\n    let selection = this.getSelection();\r\n    if (selection) {\r\n      selection.click();\r\n      return true;\r\n    } else {\r\n      // We use what is typed if not selected and not empty\r\n      if (this._config.allowNew && this._searchInput.value) {\r\n        let text = this._searchInput.value;\r\n        const el = this._add(text, text, { new: 1 });\r\n        return el ? true : false;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} show\r\n   */\r\n  _loadFromServer(show = false) {\r\n    if (this._abortController) {\r\n      this._abortController.abort();\r\n    }\r\n    this._abortController = new AbortController();\r\n\r\n    const params = Object.assign({}, this._config.serverParams);\r\n    // Pass current value\r\n    params[this._config.queryParam] = this._searchInput.value;\r\n    // Prevent caching\r\n    if (this._config.noCache) {\r\n      params.t = Date.now();\r\n    }\r\n    // We have a related field\r\n    if (params.related) {\r\n      /**\r\n       * @type {HTMLInputElement}\r\n       */\r\n      //@ts-ignore\r\n      const input = document.getElementById(params.related);\r\n      if (input) {\r\n        params.related = input.value;\r\n      }\r\n    }\r\n\r\n    const urlParams = new URLSearchParams(params);\r\n    let url = this._config.server;\r\n    let fetchOptions = Object.assign(this._config.fetchOptions, {\r\n      method: this._config.serverMethod || \"GET\",\r\n      signal: this._abortController.signal,\r\n    });\r\n\r\n    if (fetchOptions.method === \"POST\") {\r\n      fetchOptions.body = urlParams;\r\n    } else {\r\n      url += \"?\" + urlParams.toString();\r\n    }\r\n\r\n    this._holderElement.classList.add(LOADING_CLASS);\r\n    fetch(url, fetchOptions)\r\n      .then((r) => this._config.onServerResponse(r))\r\n      .then((suggestions) => {\r\n        let data = suggestions.data || suggestions;\r\n\r\n        // initial suggestions\r\n\r\n        this._buildSuggestions(data);\r\n        this._abortController = null;\r\n        if (show) {\r\n          this._showSuggestions();\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        if (e.name === \"AbortError\") {\r\n          return;\r\n        }\r\n        console.error(e);\r\n      })\r\n      .finally((e) => {\r\n        this._holderElement.classList.remove(LOADING_CLASS);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Wrapper for the public addItem method that check if the item\r\n   * can be added\r\n   *\r\n   * @param {string} text\r\n   * @param {string} value\r\n   * @param {object} data\r\n   * @return {HTMLOptionElement|null}\r\n   */\r\n  _add(text, value = null, data = {}) {\r\n    if (!this.canAdd(text, data)) {\r\n      return null;\r\n    }\r\n    const el = this.addItem(text, value, data);\r\n    if (this._config.keepOpen) {\r\n      this._showSuggestions();\r\n    } else {\r\n      this.resetSearchInput();\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} li\r\n   * @returns {Boolean}\r\n   */\r\n  _isItemEnabled(li) {\r\n    if (li.style.display === \"none\") {\r\n      return false;\r\n    }\r\n    const fc = li.firstElementChild;\r\n    return fc.tagName === \"A\" && !fc.classList.contains(\"disabled\");\r\n  }\r\n\r\n  /**\r\n   * @param {String} dir\r\n   * @param {*|HTMLElement} sel\r\n   * @returns {HTMLElement}\r\n   */\r\n  _moveSelection(dir = NEXT, sel = null) {\r\n    const active = this.getSelection();\r\n\r\n    // select first li if visible\r\n    if (!active) {\r\n      // no active selection, cannot go back\r\n      if (dir === PREV) {\r\n        return sel;\r\n      }\r\n      // find first enabled item\r\n      if (!sel) {\r\n        sel = this._dropElement.firstChild;\r\n        while (sel && !this._isItemEnabled(sel)) {\r\n          sel = sel[\"nextSibling\"];\r\n        }\r\n      }\r\n    } else {\r\n      const sibling = dir === NEXT ? \"nextSibling\" : \"previousSibling\";\r\n\r\n      // Iterate over visible li\r\n      sel = active.parentNode;\r\n      do {\r\n        sel = sel[sibling];\r\n      } while (sel && !this._isItemEnabled(sel));\r\n\r\n      // We have a new selection\r\n      if (sel) {\r\n        // Remove classes from current active\r\n        active.classList.remove(...this._activeClasses());\r\n      } else if (active) {\r\n        // Use active element as selection\r\n        sel = active.parentElement;\r\n      }\r\n    }\r\n\r\n    if (sel) {\r\n      // Scroll if necessary\r\n      const selHeight = sel.offsetHeight;\r\n      const selTop = sel.offsetTop;\r\n      const parent = sel.parentNode;\r\n      const parentHeight = parent.offsetHeight;\r\n      const parentScrollHeight = parent.scrollHeight;\r\n      const parentTop = parent.offsetTop;\r\n\r\n      // Reset scroll, this can happen if menu was scrolled then hidden\r\n      if (selHeight === 0) {\r\n        setTimeout(() => {\r\n          parent.scrollTop = 0;\r\n        });\r\n      }\r\n\r\n      if (dir === PREV) {\r\n        // Don't use scrollIntoView as it scrolls the whole window\r\n        // Avoid minor top scroll due to headers\r\n        const scrollTop = selTop - parentTop > 10 ? selTop - parentTop : 0;\r\n        parent.scrollTop = scrollTop;\r\n      } else {\r\n        // This is the equivalent of scrollIntoView(false) but only for parent node\r\n        // Only scroll if the element is not visible\r\n        const scrollNeeded = selTop + selHeight - (parentHeight + parent.scrollTop);\r\n        if (scrollNeeded > 0 && selHeight > 0) {\r\n          parent.scrollTop = selTop + selHeight - parentHeight + 1;\r\n          // On last element, make sure we scroll the the bottom\r\n          if (parent.scrollTop + parentHeight >= parentScrollHeight - 10) {\r\n            parent.scrollTop = selTop - parentTop;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Adjust link\r\n      const a = sel.querySelector(\"a\");\r\n      a.classList.add(...this._activeClasses());\r\n      this._searchInput.setAttribute(\"aria-activedescendant\", a.getAttribute(\"id\"));\r\n      if (this._config.updateOnSelect) {\r\n        this._searchInput.value = a.dataset.label;\r\n        this._adjustWidth();\r\n      }\r\n    } else {\r\n      this._searchInput.setAttribute(\"aria-activedescendant\", \"\");\r\n    }\r\n    return sel;\r\n  }\r\n\r\n  /**\r\n   * Adjust the field to fit its content and show/hide placeholder if needed\r\n   */\r\n  _adjustWidth() {\r\n    this._holderElement.classList.remove(PLACEHOLDER_CLASS);\r\n    if (this._searchInput.value) {\r\n      this._searchInput.size = this._searchInput.value.length;\r\n    } else {\r\n      // Show the placeholder only if empty\r\n      if (this.getSelectedValues().length) {\r\n        this._searchInput.placeholder = \"\";\r\n        this._searchInput.size = 1;\r\n      } else {\r\n        this._searchInput.size = this._config.placeholder.length > 0 ? this._config.placeholder.length : 1;\r\n        this._searchInput.placeholder = this._config.placeholder;\r\n        this._holderElement.classList.add(PLACEHOLDER_CLASS);\r\n      }\r\n    }\r\n\r\n    // If the string contains ascii chars or strange font, input size may be wrong\r\n    // We cannot only rely on the size attribute\r\n    const v = this._searchInput.value || this._searchInput.placeholder;\r\n    const computedFontSize = window.getComputedStyle(this._holderElement).fontSize;\r\n    const w = calcTextWidth(v, computedFontSize) + 16;\r\n    this._searchInput.style.width = w + \"px\"; // Don't use minWidth as it would prevent using maxWidth\r\n  }\r\n\r\n  /**\r\n   * Add suggestions to the drop element\r\n   * @param {Array} suggestions\r\n   */\r\n  _buildSuggestions(suggestions) {\r\n    while (this._dropElement.lastChild) {\r\n      this._dropElement.removeChild(this._dropElement.lastChild);\r\n    }\r\n    let idx = 0;\r\n    let groupId = 1; // start at one, because data-id = \"\" + 0 doesn't do anything\r\n    for (let i = 0; i < suggestions.length; i++) {\r\n      const suggestion = suggestions[i];\r\n\r\n      // Handle optgroups\r\n      if (suggestion[\"group\"]) {\r\n        const newChild = document.createElement(\"li\");\r\n        newChild.setAttribute(\"role\", \"presentation\");\r\n        newChild.dataset.id = \"\" + groupId;\r\n        const newChildSpan = document.createElement(\"span\");\r\n        newChild.append(newChildSpan);\r\n        newChildSpan.classList.add(...[\"dropdown-header\", \"text-truncate\"]);\r\n        newChildSpan.innerHTML = suggestion[\"group\"];\r\n        this._dropElement.appendChild(newChild);\r\n\r\n        if (suggestion[\"items\"]) {\r\n          for (let j = 0; j < suggestion[\"items\"].length; j++) {\r\n            const groupSuggestion = suggestion[\"items\"][j];\r\n            groupSuggestion.group_id = groupId;\r\n            this._buildSuggestionsItem(suggestion[\"items\"][j], idx);\r\n            idx++;\r\n          }\r\n        }\r\n\r\n        groupId++;\r\n      }\r\n\r\n      this._buildSuggestionsItem(suggestion, idx);\r\n      idx++;\r\n    }\r\n\r\n    // Create the not found message\r\n    if (this._config.notFoundMessage) {\r\n      const notFound = document.createElement(\"li\");\r\n      notFound.setAttribute(\"role\", \"presentation\");\r\n      notFound.classList.add(CLASS_PREFIX + \"not-found\");\r\n      // Actual message is refreshed on typing, but we need item for consistency\r\n      notFound.innerHTML = `<span class=\"dropdown-item\"></span>`;\r\n      this._dropElement.appendChild(notFound);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Suggestion} suggestion\r\n   * @param {Number} i\r\n   */\r\n  _buildSuggestionsItem(suggestion, i) {\r\n    if (!suggestion[this._config.valueField]) {\r\n      return;\r\n    }\r\n\r\n    const value = suggestion[this._config.valueField];\r\n    const label = suggestion[this._config.labelField];\r\n\r\n    // initial selection from remote data (only works if live server is disabled)\r\n    if (this._config.server && !this._config.liveServer) {\r\n      if (suggestion.selected || this._config.selected.includes(value)) {\r\n        // We need _add to create an actual option so we can track it for reset later\r\n        const added = this._add(label, value, suggestion.data);\r\n        // track for reset\r\n        if (added) {\r\n          added.dataset.init = \"true\";\r\n        }\r\n      }\r\n    }\r\n\r\n    let textContent = this._config.onRenderItem(suggestion, label, this);\r\n\r\n    const newChild = document.createElement(\"li\");\r\n    newChild.setAttribute(\"role\", \"presentation\");\r\n    if (suggestion.group_id) {\r\n      newChild.setAttribute(\"data-group-id\", \"\" + suggestion.group_id);\r\n    }\r\n    const newChildLink = document.createElement(\"a\");\r\n    newChild.append(newChildLink);\r\n    newChildLink.setAttribute(\"id\", this._dropElement.getAttribute(\"id\") + \"-\" + i);\r\n    newChildLink.classList.add(...[\"dropdown-item\", \"text-truncate\"]);\r\n    if (suggestion.disabled) {\r\n      newChildLink.classList.add(...[\"disabled\"]);\r\n    }\r\n    newChildLink.setAttribute(VALUE_ATTRIBUTE, value);\r\n    newChildLink.setAttribute(\"data-label\", label);\r\n    newChildLink.setAttribute(\"href\", \"#\");\r\n    newChildLink.innerHTML = textContent;\r\n    this._dropElement.appendChild(newChild);\r\n\r\n    // Hover sets active item\r\n    newChildLink.addEventListener(\"mouseenter\", (event) => {\r\n      // Don't trigger enter if using arrows\r\n      if (this._keyboardNavigation) {\r\n        return;\r\n      }\r\n      this.removeSelection();\r\n      newChild.querySelector(\"a\").classList.add(...this._activeClasses());\r\n    });\r\n    newChildLink.addEventListener(\"mousedown\", (event) => {\r\n      // Otherwise searchInput would lose focus and close the menu\r\n      event.preventDefault();\r\n    });\r\n    newChildLink.addEventListener(\"click\", (event) => {\r\n      event.preventDefault();\r\n      this._add(label, value, suggestion.data);\r\n      this._config.onSelectItem(suggestion, this);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @returns {NodeListOf<HTMLOptionElement>}\r\n   */\r\n  initialOptions() {\r\n    return this._selectElement.querySelectorAll(\"option[data-init]\");\r\n  }\r\n\r\n  reset() {\r\n    this.removeAll();\r\n\r\n    // Reset doesn't fire change event\r\n    this._fireEvents = false;\r\n    const opts = this.initialOptions();\r\n    for (let j = 0; j < opts.length; j++) {\r\n      const iv = opts[j];\r\n      this.addItem(iv.textContent, iv.value, iv.dataset);\r\n    }\r\n    this._adjustWidth();\r\n    this._fireEvents = true;\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} init Pass true during init\r\n   */\r\n  resetSearchInput(init = false) {\r\n    this._searchInput.value = \"\";\r\n    this._adjustWidth();\r\n\r\n    if (!init) {\r\n      this.hideSuggestions();\r\n      // Trigger input even to show suggestions if needed when focused\r\n      if (this._searchInput === document.activeElement) {\r\n        this._searchInput.dispatchEvent(new Event(\"input\"));\r\n      }\r\n    }\r\n\r\n    // We use visibility instead of display to keep layout intact\r\n    if (this.isMaxReached()) {\r\n      this._searchInput.style.visibility = \"hidden\";\r\n    } else if (this._searchInput.style.visibility == \"hidden\") {\r\n      this._searchInput.style.visibility = \"visible\";\r\n    }\r\n\r\n    if (this.isSingle() && !init) {\r\n      //@ts-ignore\r\n      document.activeElement.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Array}\r\n   */\r\n  getSelectedValues() {\r\n    // option[selected] is used rather that selectedOptions as it works more consistently\r\n    /**\r\n     * @type {NodeListOf<HTMLOptionElement>}\r\n     */\r\n    const selected = this._selectElement.querySelectorAll(\"option[selected]\");\r\n    return Array.from(selected).map((el) => el.value);\r\n  }\r\n\r\n  /**\r\n   * @returns {Array}\r\n   */\r\n  getAvailableValues() {\r\n    /**\r\n     * @type {NodeListOf<HTMLOptionElement>}\r\n     */\r\n    const selected = this._selectElement.querySelectorAll(\"option\");\r\n    return Array.from(selected).map((el) => el.value);\r\n  }\r\n\r\n  /**\r\n   * Show suggestions or search them depending on live server\r\n   * @param {Boolean} check\r\n   */\r\n  showOrSearch(check = true) {\r\n    if (check && !this._shouldShow()) {\r\n      // focusing should not clear validation\r\n      this.hideSuggestions(false);\r\n      return;\r\n    }\r\n    if (this._config.liveServer) {\r\n      this._searchFunc();\r\n    } else {\r\n      this._showSuggestions();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The element create with buildSuggestions\r\n   * @param {Boolean} clearValidation\r\n   */\r\n  hideSuggestions(clearValidation = true) {\r\n    this._dropElement.classList.remove(SHOW_CLASS);\r\n    this._searchInput.ariaExpanded = \"false\";\r\n    this.removeSelection();\r\n    if (clearValidation) {\r\n      this._holderElement.classList.remove(INVALID_CLASS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show or hide suggestions\r\n   * @param {Boolean} check\r\n   * @param {Boolean} clearValidation\r\n   */\r\n  toggleSuggestions(check = true, clearValidation = true) {\r\n    if (this._dropElement.classList.contains(SHOW_CLASS)) {\r\n      this.hideSuggestions(clearValidation);\r\n    } else {\r\n      this.showOrSearch(check);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Do we have enough input to show suggestions ?\r\n   * @returns {Boolean}\r\n   */\r\n  _shouldShow() {\r\n    if (this.isDisabled()) {\r\n      return false;\r\n    }\r\n    if (this._config.maximumItems > 0 && this.getSelectedValues().length >= this._config.maximumItems) {\r\n      return false;\r\n    }\r\n    return this._searchInput.value.length >= this._config.suggestionsThreshold;\r\n  }\r\n\r\n  /**\r\n   * The element create with buildSuggestions\r\n   */\r\n  _showSuggestions() {\r\n    // Never show suggestions if you cannot add new values\r\n    if (this._searchInput.style.visibility == \"hidden\") {\r\n      return;\r\n    }\r\n\r\n    const lookup = removeDiacritics(this._searchInput.value).toLowerCase();\r\n\r\n    // Get current values\r\n    const values = this.getSelectedValues();\r\n\r\n    // Filter the list according to search string\r\n    const list = this._dropElement.querySelectorAll(\"li\");\r\n    let count = 0;\r\n    let firstItem = null;\r\n    let hasPossibleValues = false;\r\n    let visibleGroups = {};\r\n    for (let i = 0; i < list.length; i++) {\r\n      /**\r\n       * @type {HTMLLIElement}\r\n       */\r\n      let item = list[i];\r\n      /**\r\n       * @type {HTMLAnchorElement|HTMLSpanElement}\r\n       */\r\n      //@ts-ignore\r\n      let link = item.firstElementChild;\r\n\r\n      // This is the empty result message or a header\r\n      if (link instanceof HTMLSpanElement) {\r\n        // We will show it later\r\n        if (item.dataset.id) {\r\n          visibleGroups[item.dataset.id] = false;\r\n        }\r\n        hideItem(item);\r\n        continue;\r\n      }\r\n\r\n      // Remove previous selection\r\n      link.classList.remove(...this._activeClasses());\r\n\r\n      // Hide selected values\r\n      if (!this._config.allowSame && values.indexOf(link.getAttribute(VALUE_ATTRIBUTE)) != -1) {\r\n        hideItem(item);\r\n        continue;\r\n      }\r\n\r\n      // Check search length since we can trigger dropdown with arrow\r\n      // using .textContent removes any html that can be present (eg: mark added through highlightTyped)\r\n      const text = removeDiacritics(link.textContent).toLowerCase();\r\n      const idx = lookup.length > 0 ? text.indexOf(lookup) : -1;\r\n      // Do we find a matching string or do we display immediately ?\r\n      const isMatched = idx >= 0 || (lookup.length === 0 && this._config.suggestionsThreshold === 0);\r\n      const showAll = this._config.showAllSuggestions || lookup.length === 0;\r\n      const selectFirst = isMatched || lookup.length === 0;\r\n      if (showAll || isMatched) {\r\n        count++;\r\n        showItem(item);\r\n        if (item.dataset.groupId) {\r\n          visibleGroups[item.dataset.groupId] = true;\r\n        }\r\n        // Only select as first item if its matching or no lookup\r\n        if (!firstItem && this._isItemEnabled(item) && selectFirst) {\r\n          firstItem = item;\r\n        }\r\n        if (this._config.maximumItems > 0 && count > this._config.maximumItems) {\r\n          hideItem(item);\r\n        }\r\n      } else {\r\n        hideItem(item);\r\n      }\r\n\r\n      if (this._config.highlightTyped && isMatched) {\r\n        const textContent = link.textContent;\r\n        const highlighted =\r\n          textContent.substring(0, idx) +\r\n          `<mark>${textContent.substring(idx, idx + lookup.length)}</mark>` +\r\n          textContent.substring(idx + lookup.length, textContent.length);\r\n        link.innerHTML = highlighted;\r\n      }\r\n\r\n      if (this._isItemEnabled(item)) {\r\n        hasPossibleValues = true;\r\n      }\r\n    }\r\n\r\n    // No item and we don't allow new items => error\r\n    if (!this._config.allowNew && !(lookup.length === 0 && !hasPossibleValues)) {\r\n      this._holderElement.classList.add(INVALID_CLASS);\r\n    }\r\n\r\n    // If we allow new elements, regex validation should happen on canAdd instead\r\n    if (this._config.allowNew && this._config.regex && this.isInvalid()) {\r\n      this._holderElement.classList.remove(INVALID_CLASS);\r\n    }\r\n\r\n    // Show all groups with visible values\r\n    Array.from(list)\r\n      .filter((li) => {\r\n        return li.dataset.id;\r\n      })\r\n      .forEach((li) => {\r\n        if (visibleGroups[li.dataset.id] === true) {\r\n          showItem(li);\r\n        }\r\n      });\r\n\r\n    if (hasPossibleValues) {\r\n      // Remove validation message if we show selectable values\r\n      this._holderElement.classList.remove(INVALID_CLASS);\r\n\r\n      // Autoselect first\r\n      if (firstItem && this._config.autoselectFirst) {\r\n        this.removeSelection();\r\n        this._moveSelection(NEXT, firstItem);\r\n      }\r\n    }\r\n\r\n    // Remove dropdown if list is empty\r\n    if (count === 0) {\r\n      if (this._config.notFoundMessage) {\r\n        /**\r\n         * @type {HTMLElement}\r\n         */\r\n        const notFound = this._dropElement.querySelector(\".\" + CLASS_PREFIX + \"not-found\");\r\n        notFound.style.display = \"block\";\r\n        const notFoundMessage = this._config.notFoundMessage.replace(\"{{tag}}\", this._searchInput.value);\r\n        notFound.innerHTML = `<span class=\"dropdown-item\">${notFoundMessage}</span>`;\r\n        this._showDropdown();\r\n      } else {\r\n        // Remove dropdown if not found (do not clear validation)\r\n        this.hideSuggestions(false);\r\n      }\r\n    } else {\r\n      // Or show it if necessary\r\n      this._showDropdown();\r\n    }\r\n  }\r\n\r\n  _showDropdown() {\r\n    this._dropElement.classList.add(SHOW_CLASS);\r\n    this._searchInput.ariaExpanded = \"true\";\r\n    this._positionMenu();\r\n  }\r\n\r\n  _positionMenu() {\r\n    const styles = window.getComputedStyle(this._searchInput);\r\n    const bounds = this._searchInput.getBoundingClientRect();\r\n    const isRTL = styles.direction === \"rtl\";\r\n\r\n    let left = null;\r\n    let top = null;\r\n\r\n    if (this._config.fixed) {\r\n      // In full width, use holder as left reference, otherwise use input\r\n      if (this._config.fullWidth) {\r\n        const holderBounds = this._holderElement.getBoundingClientRect();\r\n        left = holderBounds.x;\r\n      } else {\r\n        left = bounds.x;\r\n      }\r\n      top = bounds.y + bounds.height;\r\n    } else {\r\n      // When positioning is not fixed, we leave it up to the browser\r\n      // it may not work in complex situations with scrollable overflows, etc\r\n      if (this._config.fullWidth) {\r\n        // Stick it at the start\r\n        left = 0;\r\n      } else {\r\n        // Position next to input (offsetLeft != bounds.x)\r\n        left = this._searchInput.offsetLeft;\r\n      }\r\n    }\r\n\r\n    // Align end\r\n    if (isRTL && !this._config.fullWidth) {\r\n      left -= this._dropElement.offsetWidth - bounds.width;\r\n    }\r\n\r\n    // Horizontal overflow\r\n    if (!this._config.fullWidth) {\r\n      const w = Math.min(window.innerWidth, document.body.offsetWidth);\r\n      const hdiff = isRTL\r\n        ? bounds.x + bounds.width - this._dropElement.offsetWidth - 1\r\n        : w - 1 - (bounds.x + this._dropElement.offsetWidth);\r\n      if (hdiff < 0) {\r\n        left = isRTL ? left - hdiff : left + hdiff;\r\n      }\r\n    }\r\n\r\n    // Reset any height overflow adjustement\r\n    this._dropElement.style.transform = \"unset\";\r\n\r\n    // Use full holder width\r\n    if (this._config.fullWidth) {\r\n      this._dropElement.style.width = this._holderElement.offsetWidth + \"px\";\r\n    }\r\n\r\n    // Position element\r\n    if (left !== null) {\r\n      this._dropElement.style.left = left + \"px\";\r\n    }\r\n    if (top !== null) {\r\n      this._dropElement.style.top = top + \"px\";\r\n    }\r\n\r\n    // Overflow height\r\n    const dropBounds = this._dropElement.getBoundingClientRect();\r\n    const h = Math.min(window.innerHeight, document.body.offsetHeight);\r\n    const vdiff = h - 1 - (dropBounds.y + dropBounds.height);\r\n\r\n    // We display above input if we have more space there\r\n    if (vdiff < 0 && bounds.y > h / 2) {\r\n      this._dropElement.style.transform = \"translateY(calc(-100% - \" + this._searchInput.offsetHeight + \"px))\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  _getBootstrapVersion() {\r\n    let ver = 5;\r\n    // If we have jQuery and the tooltip plugin for BS4\r\n    //@ts-ignore\r\n    if (window.jQuery && $.fn.tooltip != undefined && $.fn.tooltip.Constructor != undefined) {\r\n      //@ts-ignore\r\n      ver = parseInt($.fn.tooltip.Constructor.VERSION.charAt(0));\r\n    }\r\n    return ver;\r\n  }\r\n\r\n  /**\r\n   * Find if label is already selected (based on attribute)\r\n   * @param {string} text\r\n   * @returns {Boolean}\r\n   */\r\n  _isSelected(text) {\r\n    const opt = Array.from(this._selectElement.querySelectorAll(\"option\")).find((el) => el.textContent == text);\r\n    if (opt && opt.getAttribute(\"selected\")) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if value matches a configured regex\r\n   * @param {string} value\r\n   * @returns {Boolean}\r\n   */\r\n  _validateRegex(value) {\r\n    const regex = new RegExp(this._config.regex.trim());\r\n    return regex.test(value);\r\n  }\r\n\r\n  /**\r\n   * @returns {HTMLElement}\r\n   */\r\n  getSelection() {\r\n    return this._dropElement.querySelector(\"a.\" + ACTIVE_CLASS);\r\n  }\r\n\r\n  removeSelection() {\r\n    const selection = this.getSelection();\r\n    if (selection) {\r\n      selection.classList.remove(...this._activeClasses());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Array}\r\n   */\r\n  _activeClasses() {\r\n    return [...this._config.activeClasses, ...[ACTIVE_CLASS]];\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 1.5\r\n   * @returns {HTMLElement}\r\n   */\r\n  getActiveSelection() {\r\n    return this.getSelection();\r\n  }\r\n\r\n  /**\r\n   * @deprecated since 1.5\r\n   */\r\n  removeActiveSelection() {\r\n    return this.removeSelection();\r\n  }\r\n\r\n  removeAll() {\r\n    let items = this.getSelectedValues();\r\n    items.forEach((item) => {\r\n      this.removeItem(item, true);\r\n    });\r\n    this._adjustWidth();\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} noEvents\r\n   */\r\n  removeLastItem(noEvents = false) {\r\n    let items = this._containerElement.querySelectorAll(\"span:not(.disabled)\");\r\n    if (!items.length) {\r\n      return;\r\n    }\r\n    let lastItem = items[items.length - 1];\r\n    this.removeItem(lastItem.getAttribute(VALUE_ATTRIBUTE), noEvents);\r\n  }\r\n\r\n  enable() {\r\n    this._selectElement.setAttribute(\"disabled\", \"\");\r\n    this.resetState();\r\n  }\r\n\r\n  disable() {\r\n    this._selectElement.removeAttribute(\"disabled\");\r\n    this.resetState();\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean}\r\n   */\r\n  isDisabled() {\r\n    return this._selectElement.hasAttribute(\"disabled\") || this._selectElement.disabled || this._selectElement.hasAttribute(\"readonly\");\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean}\r\n   */\r\n  isDropdownVisible() {\r\n    return this._dropElement.classList.contains(SHOW_CLASS);\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean}\r\n   */\r\n  isInvalid() {\r\n    return this._holderElement.classList.contains(INVALID_CLASS);\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean}\r\n   */\r\n  isSingle() {\r\n    return !this._selectElement.hasAttribute(\"multiple\");\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean}\r\n   */\r\n  isMaxReached() {\r\n    return this._config.max && this.getSelectedValues().length >= this._config.max;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   * @param {Object} data\r\n   * @returns {Boolean}\r\n   */\r\n  canAdd(text, data = {}) {\r\n    // Check invalid input\r\n    if (!text) {\r\n      return false;\r\n    }\r\n    // Check disabled\r\n    if (this.isDisabled()) {\r\n      return false;\r\n    }\r\n    // Check already selected input (single will replace)\r\n    if (!this.isSingle() && !this._config.allowSame && this._isSelected(text)) {\r\n      return false;\r\n    }\r\n    // Check for max\r\n    if (this.isMaxReached()) {\r\n      return false;\r\n    }\r\n    // Check for regex on new input\r\n    if (this._config.regex && data.new && !this._validateRegex(text)) {\r\n      this._holderElement.classList.add(INVALID_CLASS);\r\n      return false;\r\n    }\r\n    // Check for custom validation\r\n    if (this._config.onCanAdd && this._config.onCanAdd(text, data, this) === false) {\r\n      this._holderElement.classList.add(INVALID_CLASS);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * You might want to use canAdd before to ensure the item is valid\r\n   * @param {string} text\r\n   * @param {string} value\r\n   * @param {object} data\r\n   * @return {HTMLOptionElement} The created or selected option\r\n   */\r\n  addItem(text, value = null, data = {}) {\r\n    if (!value) {\r\n      value = text;\r\n    }\r\n\r\n    // Single items remove first\r\n    if (this.isSingle() && this.getSelectedValues().length) {\r\n      this.removeLastItem(true);\r\n    }\r\n\r\n    // Keep in mind that we can have the same value for multiple options\r\n    // escape invalid characters for HTML attributes: \\' \" = < > ` &.'\r\n    const escapedValue = CSS.escape(value);\r\n    let opts = this._selectElement.querySelectorAll('option[value=\"' + escapedValue + '\"]');\r\n    /**\r\n     * @type {HTMLOptionElement}\r\n     */\r\n    let opt = null;\r\n    if (this._config.allowSame) {\r\n      // Match same items by content\r\n      opts.forEach(\r\n        /**\r\n         * @param {HTMLOptionElement} o\r\n         */\r\n        (o) => {\r\n          if (o.textContent === text && !o.selected) {\r\n            opt = o;\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      //@ts-ignore\r\n      opt = opts[0] || null;\r\n    }\r\n\r\n    // we need to create a new option\r\n    if (!opt) {\r\n      opt = document.createElement(\"option\");\r\n      opt.value = value;\r\n      opt.textContent = text; // innerText is not well supported by jsdom\r\n      // Pass along data provided\r\n      for (const [key, value] of Object.entries(data)) {\r\n        opt.dataset[key] = value;\r\n      }\r\n      this._selectElement.appendChild(opt);\r\n      this._config.onCreateItem(opt, this);\r\n    }\r\n\r\n    if (opt) {\r\n      data = Object.assign(\r\n        {\r\n          title: opt.getAttribute(\"title\"),\r\n        },\r\n        data,\r\n        opt.dataset\r\n      );\r\n    }\r\n    // update select, we need to set attribute for option[selected]\r\n    opt.setAttribute(\"selected\", \"selected\");\r\n    opt.selected = true;\r\n\r\n    // mobile safari is doing it's own crazy thing...\r\n    // without this, it wil not pick up the proper state of the select element and validation will fail\r\n    const html = this._selectElement.innerHTML;\r\n    this._selectElement.innerHTML = \"\";\r\n    this._selectElement.innerHTML = html;\r\n\r\n    this._createBadge(text, value, data);\r\n\r\n    // Fire change event\r\n    if (this._fireEvents) {\r\n      this._selectElement.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n    }\r\n\r\n    return opt;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text\r\n   * @param {string} value\r\n   * @param {object} data\r\n   */\r\n  _createBadge(text, value = null, data = {}) {\r\n    const bver = this._getBootstrapVersion();\r\n    const allowClear = this._config.allowClear && !data.disabled;\r\n\r\n    // create span\r\n    let html = text;\r\n    let span = document.createElement(\"span\");\r\n    let classes = [\"badge\"];\r\n    let badgeStyle = this._config.badgeStyle;\r\n    if (data.badgeStyle) {\r\n      badgeStyle = data.badgeStyle;\r\n    }\r\n    if (data.badgeClass) {\r\n      classes.push(...data.badgeClass.split(\" \"));\r\n    }\r\n    if (this._config.baseClass) {\r\n      // custom style\r\n      classes.push(...this._config.baseClass.split(\" \"));\r\n    } else if (bver === 5) {\r\n      // https://getbootstrap.com/docs/5.3/components/badge/\r\n      // add extra classes to avoid any layout issues due to very large labels\r\n      classes = [...classes, ...[\"bg-\" + badgeStyle, \"mw-100\", \"overflow-x-hidden\"]];\r\n    } else {\r\n      // https://getbootstrap.com/docs/4.6/components/badge/\r\n      classes = [...classes, ...[\"badge-\" + badgeStyle]];\r\n    }\r\n\r\n    if (data.disabled) {\r\n      classes.push(...[\"disabled\", \"opacity-50\"]);\r\n    }\r\n\r\n    // We cannot really rely on classes to get a proper sizing\r\n    span.style.margin = \"2px 6px 2px 0px\";\r\n    // Use logical styles for RTL support\r\n    span.style.marginBlock = \"2px\";\r\n    span.style.marginInline = \"0px 6px\";\r\n    span.classList.add(...classes);\r\n    span.setAttribute(VALUE_ATTRIBUTE, value);\r\n    // Tooltips\r\n    if (data.title) {\r\n      span.setAttribute(\"title\", data.title);\r\n    }\r\n\r\n    if (allowClear) {\r\n      const closeClass = classes.includes(\"text-dark\") ? \"btn-close\" : \"btn-close-white\";\r\n      let btnMargin;\r\n      let btnFloat;\r\n      if (this._config.clearEnd) {\r\n        btnMargin = bver === 5 ? \"ms-2\" : \"ml-2\";\r\n        btnFloat = bver === 5 ? \"float-end\" : \"float:right;\";\r\n      } else {\r\n        btnMargin = bver === 5 ? \"me-2\" : \"mr-2\";\r\n        btnFloat = bver === 5 ? \"float-start\" : \"float:left;\";\r\n      }\r\n      const btn =\r\n        bver === 5\r\n          ? '<button type=\"button\" style=\"font-size:0.65em\" class=\"' +\r\n            btnMargin +\r\n            \" \" +\r\n            btnFloat +\r\n            \" btn-close \" +\r\n            closeClass +\r\n            '\" aria-label=\"' +\r\n            this._config.clearLabel +\r\n            '\"></button>'\r\n          : '<button type=\"button\" style=\"font-size:1em;' +\r\n            btnFloat +\r\n            'text-shadow:none;color:currentColor;transform:scale(1.2)\" class=\"' +\r\n            btnMargin +\r\n            ' close\" aria-label=\"' +\r\n            this._config.clearLabel +\r\n            '\"><span aria-hidden=\"true\">&times;</span></button>';\r\n      html = btn + html;\r\n    }\r\n\r\n    span.innerHTML = html;\r\n    this._containerElement.insertBefore(span, this._searchInput);\r\n    if (window.bootstrap && window.bootstrap.Tooltip) {\r\n      window.bootstrap.Tooltip.getOrCreateInstance(span);\r\n    }\r\n\r\n    if (allowClear) {\r\n      span.querySelector(\"button\").addEventListener(\"click\", (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (!this.isDisabled()) {\r\n          this.removeItem(value);\r\n          //@ts-ignore\r\n          document.activeElement.blur();\r\n          this._adjustWidth();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @param {Boolean} value\r\n   */\r\n  removeItem(value, noEvents = false) {\r\n    // Remove badge if any\r\n    // escape invalid characters for HTML attributes: \\' \" = < > ` &.'\r\n    const escapedValue = CSS.escape(value);\r\n    let item = this._containerElement.querySelector(\"span[\" + VALUE_ATTRIBUTE + '=\"' + escapedValue + '\"]');\r\n    if (!item) {\r\n      return;\r\n    }\r\n    item.remove();\r\n\r\n    // update select\r\n    /**\r\n     * @type {HTMLOptionElement}\r\n     */\r\n    let opt = this._selectElement.querySelector('option[value=\"' + escapedValue + '\"][selected]');\r\n\r\n    if (opt) {\r\n      opt.removeAttribute(\"selected\");\r\n      opt.selected = false;\r\n\r\n      // Fire change event\r\n      if (this._fireEvents && !noEvents) {\r\n        this._selectElement.dispatchEvent(new Event(\"change\", { bubbles: true }));\r\n      }\r\n    }\r\n\r\n    // Make input visible\r\n    if (this._searchInput.style.visibility == \"hidden\" && !this.isMaxReached()) {\r\n      this._searchInput.style.visibility = \"visible\";\r\n    }\r\n\r\n    if (!noEvents) {\r\n      this._config.onClearItem(value, this);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Tags;\r\n"],
  "mappings": "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",
  "names": []
}
